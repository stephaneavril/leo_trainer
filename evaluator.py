# evaluator.py

import os
import openai
import textwrap
import re

openai.api_key = os.getenv("OPENAI_API_KEY")

def evaluate_interaction(user_text, leo_text):
    """
    Eval√∫a la interacci√≥n con base en los textos proporcionados.
    Si est√° disponible la API de OpenAI, utiliza GPT-4 para redacci√≥n fluida.
    Adem√°s incluye an√°lisis t√©cnicos robustos locales para RH.
    """

    def basic_keywords_eval(text):
        score = 0
        keywords = ["beneficio", "estudio", "s√≠ntoma", "tratamiento", "reflujo", "mecanismo", "eficacia", "seguridad"]
        for kw in keywords:
            if kw in text.lower():
                score += 1
        return score

    def detect_closure_language(text):
        closure_patterns = ["compromiso", "siguiente paso", "acordamos", "puedo contar con"]
        return any(p in text.lower() for p in closure_patterns)

    def detect_visual_cues(text):
        if re.search(r"(c[a√°]mara|postura|frente al m[o√≥]dulo|me ves|visible|pantalla)", text, re.IGNORECASE):
            return "‚úÖ Tu postura fue profesional y te mostraste frente a la c√°mara con claridad.", "Correcta"
        return "‚ö†Ô∏è Aseg√∫rate de mantener una postura profesional y estar visible correctamente frente a la c√°mara.", "Mejorar visibilidad frente a c√°mara"

    # An√°lisis t√©cnico local
    score = basic_keywords_eval(user_text)
    closure_ok = detect_closure_language(user_text)
    visual_feedback, visual_eval = detect_visual_cues(user_text)

    # Redacci√≥n motivacional GPT-4 si es posible
    gpt_feedback = ""
    try:
        if openai.api_key and openai.api_key.startswith("sk-"):
            prompt = f"""
            Act√∫a como evaluador de una simulaci√≥n m√©dica.
            Participante: {user_text}
            M√©dico (Leo): {leo_text}
            Eval√∫a al participante de forma constructiva, motivadora y profesional.
            """
            res = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Eres un coach experto en entrenamientos cl√≠nicos. S√© espec√≠fico y claro."},
                    {"role": "user", "content": prompt.strip()}
                ],
                temperature=0.5
            )
            gpt_feedback = res.choices[0].message.content.strip()
        else:
            gpt_feedback = "Gracias por tu participaci√≥n. Mostraste buena disposici√≥n. Sigue mejorando tus habilidades cl√≠nicas y de comunicaci√≥n."
    except Exception as e:
        gpt_feedback = f"‚ö†Ô∏è Evaluaci√≥n GPT-4 no disponible: {str(e)}"

    public_summary = textwrap.dedent(f"""
        üëè {gpt_feedback}

        {visual_feedback}

        √Åreas sugeridas:
        - Aseg√∫rate de responder con evidencia m√©dica.
        - Refuerza el uso del modelo de ventas Da Vinci.
        - Recuerda manejar bien cada objeci√≥n m√©dica.
        - Mant√©n contacto visual con la c√°mara y buena presencia.
    ")

    internal_summary = textwrap.dedent(f"""
            Evaluaci√≥n t√©cnica (RH):
        - Claridad en la comunicaci√≥n: {'Alta' if score >= 6 else 'Media' if score >= 3 else 'Baja'}
        - Aplicaci√≥n del modelo de ventas Da Vinci: {'Mencionado' if 'da vinci' in user_text.lower() else 'No evidenciado'}
        - Dominio t√©cnico del producto: {score}/8
        - Manejo de objeciones: {'Adecuado' if 'objeci√≥n' in user_text.lower() else 'No observado'}
        - Cierre: {'Presente' if closure_ok else 'Ausente'}
        - Evaluaci√≥n visual/postural: {visual_eval}

        Recomendaciones:
        - Fortalecer argumentos cl√≠nicos y cient√≠ficos con datos de estudios o mecanismos.
        - Enfatizar el cierre con lenguaje de compromiso.
        - Validar objeciones planteadas por el m√©dico antes de responder.
        - Mostrar actitud profesional ante c√°mara.
    ")

    return {
        "public": public_summary.strip(),
        "internal": internal_summary.strip(),
    }
